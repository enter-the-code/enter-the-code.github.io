{
    "componentChunkName": "component---src-templates-post-template-js",
    "path": "/blog/react_3/",
    "result": {"data":{"markdownRemark":{"excerpt":"const 변수 const는 값을 수정할수 없는 변수이다. 선언하고 나서는 바꿀수 없다는 것이다\n\n왜 사용하냐? 변경해서는 안되는 변수를 변경하는것을 방지하기 위해서이다.\n\n따라서 값은 변경할수 없고 만약 시도를 한다면 오류가 뜨게 된다.\n let 키워드 우리가 c 나 c…","html":"<h1>const 변수</h1>\n<p>const는 값을 수정할수 없는 변수이다. 선언하고 나서는 바꿀수 없다는 것이다\n</br>\n왜 사용하냐? 변경해서는 안되는 변수를 변경하는것을 방지하기 위해서이다.\n</br>\n따라서 값은 변경할수 없고 만약 시도를 한다면 오류가 뜨게 된다.\n</br></p>\n<h1>let 키워드</h1>\n<p>우리가 c 나 c++에서 보면 지역변수 라는 것이 있잖아요? 그거는 {}요 블럭 혹은 함수가 끝나면 사라지는 값들이잖아요.\n</br>\n하지만 자바스크립트는 조금 다릅니다.\n</br>\n바깥부분에</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> topic</code></pre></div>\n</br>\n을 선언하고 {}에서 다시한번 선언해서 사용한다면 밖의 값이 바뀌는 일이 벌어집니다.\n다른 언어 에서는 지역으로 취급해 블록 밖의 변수와 동일 취급을 안해주지만 자바스크립트는 동일 취급해준다는 겁니다.\n</br>\n이러면 지역변수는 못쓰냐? ㅅㅂ... 가 아니라 사용할수 있는데 그게 바로 let 변수 입니다\n</br>\nlet변수를 사용한다면 글로벌 변수를 방어하고 블록 안의 지역변수로써 사용할수있습니다.\n</br>\n# 템플릿 문자열\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">{</span>example<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n여기 example값에 무엇이들어가건 값을 만들어내는 어떤값이라면 출력이 가능하다 걍 이쁘게 하는거죠 뭐.\n</br>\n<h1>함수 만들기</h1>\n<p>함수 만드는 방식 에는 3가지가 있는데 함수를 선언하는것과 함수 표현식을 사용하는것 후자는 변수처럼 선언, 마지막한개는 밑에\n다시설명하겠다\n</br></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">visit</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"네이스\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이것과\n</br></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">example</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">visit</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ㅋㅋㅋㅋ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이것이다</p>\n</br>\n파라미터를 넘기는건 위의 visit처럼 넘겨주면된다 다른언어와 동일하다 리턴도 동일하다\n</br>\n디폴트 파라미더도 매개변수 옆에다가 = 붙이고 값을 적어주면 디폴트로 들어간다.\n</br>\n그리고 화살표 함수라는것이 있는데 => 이거 쓰는것이다\n</br>\n아래가 예시이다\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">something</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">example</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"yeah ${example}\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와같이 사용하는것이 화살표 함수이다\n죄다 생략한것 봐라 날먹처럼보이나 괄호같은경우는 길면 둘러싸주게 되어 있다</p>\n</br>\n \n # 객체 반환하기\n</br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstname<span class=\"token punctuation\">,</span>secondname</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">=</span>firstname<span class=\"token punctuation\">;</span>\n    second<span class=\"token operator\">=</span>secondname<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그냥 ()거 없이 {} 이것만 쓴다면 syntax에러 가뜬다 그러니까 해결하기 위해서는 소괄호를 써야한다</p>\n<h1>화살표 함수와 영역</h1>\n</br>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> gangwon<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>resorts\n    <span class=\"token string\">\"배열\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">print</span><span class=\"token operator\">:</span> <span class=\"token string\">\"함수식{또 다른 함수식}\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</br>\n이런식일때 print함수 안에서 this.\"배열\".join를 쓰면 오류가 터지는데 this가 window 객체이기 때문이다.\n이걸 해결하려면 저기 프린트 객체에서 함수식 안에 함수식에다가 화살표함수를 사용하면 된다\n<h1>객체와 배열</h1>\n<p>구조 분해를 사용한 대입이 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"person 객체\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>man<span class=\"token punctuation\">,</span>women<span class=\"token punctuation\">}</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">;</span></code></pre></div>\n</br>\n이런식으로 안의 객체의 프로퍼티를 조각내서 대입해서 사용할수있다.\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"person 객체\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>women<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n</br>\n배열도 된다 구조를 묶는 과정도있는데\n그냥 변수에 {a,b}이걸 사용해서 묶으면 끝이다.\n<h1>스프레드 연산자</h1>\n</br>\n<p>이거 나중에 인터넷에 아무 로긴페이지 코드 예시를 쳐서보면 진짜 자주볼수있는 연산자이다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"...\"</span></code></pre></div>\n</br>\n위처럼 ... 이라는 연산자인데\n<p>하는 역할은 배열을 합칠때 쓴다던가 혹은 reverse같은 함수를 사용하면 리턴하는 변수에도 reverse 가 적용되고 리턴을 받는 놈도 reverse가 적용된다 그때 받는 변수만 reverse받으려면 그때 스프레드 연산자를 사용한다</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">peaks<span class=\"token operator\">=</span><span class=\"token string\">\"어떤 배열\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>peaks<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</br>\n아래처럼 하면 원래 핔스배열연 리버스 되지 않는다","frontmatter":{"title":"자바스크립트 문법 변수 함수 관련","tags":["react"],"date":"June 06, 2022","description":null,"social_image":null}},"prev":{"frontmatter":{"title":"node 설치해보기"},"fields":{"slug":"/blog/react_1/"}},"next":null},"pageContext":{"slug":"/blog/react_3/","prevSlug":"/blog/react_1/","nextSlug":null}},
    "staticQueryHashes": ["2555585279","2714594843","3159585216"]}